Curso de Docker udemy

Seção 1: Introdução
1. Visão Geral

Visão geral do curso

2. Apresentação - Juracy Filho

Apresenta o curiculo dos manos

3. Apresentação - Leonardo Leitão

Apresenta o curiculo dos manos

4. Material de Apoio: Repositório e Apostila

Tem um material para baixar e um Repositório para poder seguir.

5. Suporte - Boas Práticas

Aqui ele está falando como fazer para acessar o suporte, e como adicionar novas duvidas.

6. Usando o terminal

Aqui ele sugere dois artigos no blog da coders para podermos ter uma maior familiaridade com o terminal em qualquer ambiente.



7. Terminais
Aqui é onde ele mostra os links mesmo
Windows -> https://blog.cod3r.com.br/terminal-no-windows/

Linux/Mac -> https://blog.cod3r.com.br/terminal-no-macos-e-linux/



Seção 2: Conceitos

8. O que é Docker?

É um sistema de virtualização, porém é diferente porque ao invés de ele criar uma infra para que você virtualize um sistema operacional dentro de uma maquina virtual ele trabalha com o conceito de container, esse conceito de container serve mais ou menos como um emcapsulamento de uma ferramenta, ele tem todos os serviços e todas as dependencias da sua ferramenta, ele ainda utiliza os recursos do host, mais ainda assim é bem mais leve.

Ele trabalha com o conceito de LXC (linux containers) ou seja eu preciso utilizar um container baseado em linux.

ele é criado em GO, e é open source.

ele permite o isolamento com niveis , ou seja eu consigo controlar os recursos que o docker vai utilizar e ainda até fazer com que os arquivos alterados sejam alterados apenas dentro do container.


9. Por que não uma VM?

Maquina virtual é mais parruda e mais completa, porém eles são mais pesados e consomem muitos recursos da maquin, já os containers possuiem quase as mesmas vantagens porém sem consumir todos esses recursos, porém um dos defeitos do docker é que ele precisa de um kernel linux para rodar.

10. O que são containers?

Basicamente ele está dizendo que o container é bem isolado com todos os seus arquivos e suas dependências, e que como ele é bem leve ele aconselha que você crie um container para cada item da sua stack, ou seja um container para o BD , um para o servidor etc.

e também diz que o container é o meio termo entre o chroot e uma VM, que seria um ambiente que é sim separado mais não 100% independente, o chroot aprisiona o processo a uma nova pasta raiz, e faz com que não seja possível escrever fora da nova pasta raiz, já a VM é um novo ambiente totalmente separado do sistema onde ele foi instalado, e o docker tem essa compartimentação do chroot mais sem consumir tanto recurso ou ser tão parrudo quanto uma VM.

11. O que são imagens Docker?

É um modelo de sistema de arquivo que é usado para montar um container docker, quando se tem um build da imagem docker ele tem um passo a passo de como criar um novo container isso significa que você vai sempre criar um novo container do mesmo jeito que foi planejado.

da para criar o seu docker file = (descritor) e armazenar no dockerhub ou baixar algumas já prontas

o esquema é fazer esse processo pelo build e não pelo commit, porque não é igual ao git que quando se da o commit ele gera uma versão, no docker se você fizer isso o descritor vai ficar salvo com as suas alterações porém ele não vai conter o passo a passo de como ou do que ele precisa para 

layered - são como niveis, e se eu tiver varios niveis só o ultimo pode ser alterado, e o restante das layers são readonly.


12. Imagem vs Container

Imagem é o modelo ou a receita de como criar um container, o container é a execução e montagem da imagem.

tipo uma classe a Imagem é a classe com todos seus atributos e metodos, já o container é o objeto instanciado.

13. Arquitetura

Docker Server , Docker Daemon, Docker engine = são todas as mesmas coisas

CLI =  é uma interface de linha de comando, que acessa o Daemon, que acessa o dockerhub para pegar as suas imagens e baixa.

Registry =  = Nuvem ou gerenciador de pacotes de imagnes do Docker


Seção 3: Instalação
14. Instalação - Visão Geral

Visão geral de Instalação, Aqui ele mostra que quando eu instalo o Docker no linux com o docker opera com a LXC ele é 100% compativel e roda utilizando todas os recursos do kernel.

porém quando vamos instalar isso no MAC OS, ou no Windows < 10 ele cria uma maquina virtual para virtualizar o linux em ambientes que não são linux.


15. Aviso importante aos usuários de Windows

    'Fala galera! Tranquilo?

    Vim aqui para passar uma dica super rápida, porém super importante para todos que irão dar início às atividades do curso no ambiente Windows.

    Existem duas configurações padrão que vêm ativadas e acabam dificultando ou gerando erros na hora de programar em qualquer ambiente. Vou explicar rapidinho sobre elas e sobre como lidar com isso.

    Na programação é super normal utilizar os caminhos absolutos de localizações na sua máquina em diversos momentos. Às vezes você mesmo utiliza, mas em geral as linguagens utilizam ali por debaixo dos panos para poder serem executadas. Esses caminhos são literalmente "c/users/seuNome/pasta" e tudo mais.

    O primeiro problema é relacionado a Área de Trabalho, pois em alguns casos ela entra nesse caminho absoluto com seu nome em português, ou seja, com espaços e acentos. E isso acaba gerando erro em diversos ambientes. A forma de se lidar com isso é bem simples, basta criar seu projeto em outra pasta que não seja a Área de Trabalho.

    O segundo problema se trata da questão do OneDrive. Nas versões mais recentes do Windows o OneDrive é ativado por padrão e ele acaba deixando todas as pastas e arquivos criados no seu computador como arquivos em nuvem ao invés de arquivos locais. Isso também acaba gerando erros em alguns ambientes. Para resolver isso é simples também, basta desativar essa opção do OneDrive para a pasta do seu projeto, ou desativar geral mesmo. Você escolhe.

    Bons estudos galera!'


16. Instalação Windows

Está mostrando o passo a passo para instalar o docker no windows , e ai está mostrando como baixar e instalar.

17. Instalação Mac

Mesma coisa, pulei poruqe não tenho MAC, e acho que não vou ter tão cedo.

18. Instalação Linux

Segue o padrão para sua distro, acho que tem para todas.


Seção 4: Uso Básico do Docker
19. Introdução ao Docker Client

Só falou que vamos testar a instalação na proxima aula.

20. Hello World: Meu Docker funciona!

Aqui ele já começa a testar a instalação docker como acessa o terminal (cmd) windows e terminal linux e digita "docker", ele deve apresentar as informações de ajuda do docker, isso já é um sinal de que o docker está instalado e rodando.

para testar se está funcionando a sua instalação usa o comando "docker container run hello-world" se você não tiver essa imagem instalada ele vai fazer o download e mostrar algumas informações dessa imagem, isso já é o sinal que está tudo certo.

OBS.no banco é bloqueado o dockerhub, ou seja não consigo fazer o download das paradas.

21. Meu querido amigo run

Aqui ele esta mostrando que o comando run faz uma serie de coisas por trás, e que ele na real eu teria que fazer mais não preciso.

syntax do docker pelo que eu vi é sempre "docker container alguma coisa" no caso o run ele faz
docker container pull   = baixa a imagem do Registry(dockerhub)
docker container create = Cria o container
docker container start  = Inicia o container
docker container exec   = Executa o container em modo interativo


22. Ferramentas diferentes

Aqui ele mostra que na real eu to verificando a versão do bash do meu container, e não o da minha maquina local, e que ao executar esse cara na primeira vez ele vai baixar a imagem do debian e trazer para a minha maquina e na proxima execução ele já vai pegar do local.


docker container run debian bash --version


docker container ps
esse comando serve para ver quais containers estão sendo executados agora.


docker container ps -a 
Mostra todas as imagens ativas ou não que eu tenho na minha maquina.


docker container run --rm debian bash --version
Aqui ele vai remover essa execução da lista do "ps"


23. Run cria sempre novos containers


docker container run -it debian bash

as Flags '-i' são para habilitar o modo interativo e a 't' para que eu consiga acessar o terminal dentro do container 


24. Containers devem ter nomes únicos

por padrão o docker cria uma hash como nome do container, e isso é horrível para utilizarmos o container por isso o ideal que é sempre renomeemos o container para um nome único que nós consigamos encontra-lo com facilidade depois.
E para fazer isso é bem simples é só usar a tag '--name + nomeDoContainer' que ele já atribui o nome que você digitar no seu container, e detalhe a flag name tem que vir antes das tags de modo interativo.

ex. docker container run --name sexoAnal -it debian bash

25. Reutilizar containers

Aqui para poder reutilizar o container que você já criou é só usar o comando "start" com o nome do seu container, por isso a importância de você nomear seus containers.

ex. docker container start -ai sexoAnal

aqui a tag -a é de attach  e a -i é de interativo.



26. Cego, surdo e mudo, só que não!

Aqui ele só apresenta que da para fazer, que é copiar e mover coisas do container para o pc e vice versa além de mapeamento de portas e "volumes" que nada mais são que pastas do container.


27. Aviso sobre comando no Windows

Fala pessoal, tranquilo?

Na próxima aula, o professor irá parar a execução de um container diretamente do terminal com o comando CTRL+C, porém esse comando só funciona no Mac e no Linux. Para o Windows é preciso utilizar o comando "docker container stop NomeDoContainer".

Bons estudos!


28. Mapear portas dos containers

Aqui é só passar a flag -p para poder mostra a porta que vai ser utilizada


ex. docker container run -p 8080:80 nginx

a porta antes do ':' é a porta da minha maquina ou servidor, e a porta que vem depois é a porta do container mesmo, então aqui a porta 8080 da minha maquina acessa a porta 80 do container.


29. Aviso sobre o comando pwd


Aviso sobre o comando pwd
Tranquilo, galera?

Passando para avisar que daqui em diante o professor vai utilizar um trecho de comando chamado "pwd". Esse comando retorna o caminho atual da pasta onde o terminal está localizado. Porém, esse "pwd" não irá funcionar em todos os terminais ou sistemas operacionais.

Caso não funcione será necessário utilizar o comando absoluto da pasta em questão. Ou seja, algo como "c/users/SeuNome/docker", variando com a localização da pasta em questão.

Bons estudos!


30. Mapear diretórios para o container

Aqui ele mostra como podemos mapear uma pasta da nossa maquina para ser utilizado pelo container, no caso aqui alteramos a pasta padrão do nginx para fazer com que a pasta default dele fosse uma pasta que eu criei aqui na minha maquina, deu um certo trabalho porque estamos lidando com caminhos absolutos e tem bastante comando mais é bem simples depois que se intende o conceito.

docker container run --name nginx -p 8080:80 -v C:\Users\lukas\Documents\projects\docker\ex-Docker-Dir\html:/usr/share/nginx/html nginx

aqui a flag de --name é para dar um nome meu para o container
flag -p é o mapeamento de portas o 1ª valor é porta da minha maquina e o segundo valor depois dos ':' é a porta do container.
flag -v é para fazer o mapeamento dos volumes(diretórios), antes do ':' é o diretório na minha maquina e depois do ':' é o diretório do container.



31. Rodar um servidor web em background

Aqui ele apresenta a flag -d que serve para que o nosso container seja executado em background, sendo assim não trava o terminal e nem me obriga a manter uma instância dele aberta .

docker container run -d --name ex-daemon -p 8080:80 -v C:\Users\lukas\Documents\projects\docker\ex-Docker-Dir\html:/usr/share/nginx/html nginx

aqui a única coisa nova é a flag -d, que serve justamente para deixar o container em background.



32. Gerenciar o container em background


Falou dos 3 comando de start , stop e restart de container.


33. Manipulação de containers em modo daemon

Segundo a lenda os comandos 

docker ps
docker ls
docker list

sõa todos da syntax antiga, e isso aqui poderia causar alguma confusão porque não dava para ser exatamente o qeu estava sendo listado, e por isso que surgiu a nova syntax que sempre leva o nome do que você está listando antes do comando por exemplo.

docker container ps
docker volume ls
docker image list

e cada uma serve para listar ou apresentar alguma coisa específica.


LOGs 

existe duas maneiras de se pegar os log's de um container, uma delas é mandando um docker container logs nomeDoContainer que vai mostrar tudo que foi feito até agora no container.

existe o docker inspect nomeDoContainer, que serve para trazer os dados do container, todo tipo de informação a respeito do container em questão.


Executar comandos no container em execução.

e ainda temos a possibilidade de executar comandos no container que já está rodando utilizando o comando 'exec'

ficaria assim: docker container exec nomeDoContainer uname -a 

que basicamente ele entra no container e executa o comando que foi colocado depois do nome do container e sai do modo interativo deixando o terminal livre para fazer qualquer coisa.


34. Nova sintaxe do Docker Client

Aqui é o exemplo de melhoria de syntax do docker que fez com que os comandos acabassem maiores e mais longos mais muito mais explícitos, porque agora meio que você é obrigado a declarar o que exatamente você está fazendo e no que exatamente, quando for container você coloca mesmo 'docker container ..' ,  quando for imagem você coloca mesmo 'docker image ... '.



**Meus Testes**

docker container run -d --name httpd -p 8080:80 -v C:/Users/lukas/Documents/projects/docker/ex-Docker-Dir/html:/usr/local/apache2/htdocs httpd:2.4

Aqui eu instalei um container do httpd é o próprio apache só que só o serviço de servidor web, ai fiz o mesmo esquema que na aula, coloquei um nome, mapeie as portas que eu queria que ficassem expostas, e ainda mapeie as pastas da minha maquina e as do proprio container , aqui tem um pulo do gato sempre usar as barras (/) que assim eu consigo chegar no diretório que eu quiser.


Seção 5: Deixando de Ser Apenas um Usuário


35. Introdução

Aqui explicou que vamos aprende a como criar as nossas próprias imagens ou manipular as imagens já existentes do dockerhub.


36. Diferenças entre container e imagem

Imagem é um modelo de sistema de arquivo que é utilizado quando um container é criado, container é esse sistema de arquivos pronto para uso, montado e acessível.


37. Entendendo melhor as imagens

Aqui ele mostra que a imagem é apenas um arquivo com todas as informações do sistema de arquivo, versões dos componentes e etc, e que podemos sempre criar tags para conseguirmos lidar melhor com as imagens que temos, por exemplo eu crio uma tag para uma imagem que eu tenha no meu pc, sendo assim sempre que eu quiser usar aquele container naquela versão eu uso a minha tag.

Dica, sempre utilizar a versão 'latest' (estável) porque se não podemos quebrar alguma coisa ou pode dar merda, e sempre utilizar versões casadas em PRD e DEV , fazendo assim sempre conseguiremos ter o mesmo problema em todos os ambientes ou a mesma funcionalidade.



38. Comandos básicos no gerenciamento de imagens


Aqui ele mostra os comandos que segundo ele são os mais importantes.

docker image pull - Serve para baixar uma imagem do Registry ou Repositório remoto, muitas vezes ele fica implícito no ( docker container run) que já baixa a imagem caso ele não exista

docker image ls - lista as imagens que temos na maquina

docker image rm - Remove uma imagem do seu cache local 

docker image inspect - mostra inúmeras informações úteis da imagem 

docker image tag - que serve para você criar uma tag para aquela imagem utilizando uma versão especifica o que vai fazer com que você ao utilizar a tag já possua a versão especifica.

docker image build - aqui você cria uma nova imagem que você vai criar um arquivo descritor informando tudo que deve conter no seu container e ai com o build o docker vai construir uma imagem .

docker image push - é para que você envie a sua imagem nova ou com as suas alterações para o Repositório remoto(Registry).



39. Docker Hub × Docker Registry


Docker Registry - é apenas um serviço de registro de imagem , que pode ser publico ou privado

Docker Hub - é um Repositório remoto que é mantido pelo próprio docker e que possui o seu próprio Registry, na pratica o dockerhub possui interface gráfica e algumas coisinhas mais do que só um Registry comum.


40. Meu primeiro build

Aqui criamos um novo diretório para poder armazenar e fazer os apontamentos necessários para o container.

utilizando o 'Dockerfile' eu criei uma 'imagem' que nada mais é do que um arquivo descritor contendo as informações do que eu quero no container utilizando imagens já existentes ou até mesmo criando algo totalmente novo.

        FROM nginx:latest
        RUN echo '<h1> new message of my cock to you!</h1>' > /usr/share/nginx/html/index.html

no exemplo acima o 'FROM' é para dizer de onde eu vou pegar a imagem que já existe e no caso ai de cima é do nginx, o comando 'RUN' server para adicionar mais uma camada(layer) no meu container, e aqui no caso eu vou adicionar essa informação dentro do arquivo 'index.html' dentro do caminho citado ali em cima.

e no meu caso ai funcionou na boa, só que eu não curti muito é essa parada de caminho absoluto, claro que com o tempo se pega mais deve dar muita merda.

ai depois é so usar o comando:

        docker image build -t justTest .

aqui a flag de '-t' serve para que de um nome para minha imagem, que no caso vai servir de nome para minha imagem, e o '.' depois do nome que eu dei é para dizer que ele deve procurar o 'Dockerfile' dentro do diretório local.

e por mais que eu tente não consegui fazer ele apontar para um caminho especifico, mais de dentro do diretório onde ta o Dockerfile funciona então beleza.

outra observação nenhum nome de imagem pode conter letras maiúsculas , só minúsculas e separadas por traço, quer dizer não testei o resto.




41. Uso das instruções de preparação

Basicamente ele mostrou que é possível passar argumentos para a nossa imagem, e que no caso você meio que declara a sua variável no Dockerfile e na hora de construir a imagem você consegue alterar e passar um novo valor.


        docker image build -t build-args-default .

fiz um novo Dockerfile para poder utilizar uma imagem que vem com variável de ambiente, aqui para cima tudo normal, build concluído com sucesso.


        docker container run --name ubuntu-with-arg build-args-default bash -c 'echo S3_BUCKET'


Aqui eu estou pegando a imagem que eu acabei de criar e dando um nome para ela , além disso já estou mandando printar na tela o valor da variável '$S3_BUCKET', que aqui é 'files' porque eu setei isso como default no Dockerfile.


        docker image build --build-arg S3_BUCKET=myapp -t build-another-arg .

Aqui eu to passando o outro valor para o argumento que eu criei no Dockerfile e gerando uma nova imagem com esse novo parâmetro.


        docker container run --name ubuntu-another-arg build-another-arg bash -c 'echo $S3_BUCKET'


Aqui eu mando printar o valor do parâmetro 'S3_BUCKET' que vem 'myapp', porque foi como ele foi criado.



        docker image inspect --format="{{index .Config.Labels \"maintainer\"}}" build-another-arg

Aqui eu to tando um inspect direto no parâmetro que eu quero, e to pedindo para traze-lo formatado, aqui no caso é o parâmetro 'maintainer' que eu criei no Dockerfile, passando 'meu nome e site'.