Curso de Docker udemy

Seção 1: Introdução
1. Visão Geral

Visão geral do curso

2. Apresentação - Juracy Filho

Apresenta o curiculo dos manos

3. Apresentação - Leonardo Leitão

Apresenta o curiculo dos manos

4. Material de Apoio: Repositório e Apostila

Tem um material para baixar e um Repositório para poder seguir.

5. Suporte - Boas Práticas

Aqui ele está falando como fazer para acessar o suporte, e como adicionar novas duvidas.

6. Usando o terminal

Aqui ele sugere dois artigos no blog da coders para podermos ter uma maior familiaridade com o terminal em qualquer ambiente.



7. Terminais
Aqui é onde ele mostra os links mesmo
Windows -> https://blog.cod3r.com.br/terminal-no-windows/

Linux/Mac -> https://blog.cod3r.com.br/terminal-no-macos-e-linux/



Seção 2: Conceitos

8. O que é Docker?

É um sistema de virtualização, porém é diferente porque ao invés de ele criar uma infra para que você virtualize um sistema operacional dentro de uma maquina virtual ele trabalha com o conceito de container, esse conceito de container serve mais ou menos como um emcapsulamento de uma ferramenta, ele tem todos os serviços e todas as dependencias da sua ferramenta, ele ainda utiliza os recursos do host, mais ainda assim é bem mais leve.

Ele trabalha com o conceito de LXC (linux containers) ou seja eu preciso utilizar um container baseado em linux.

ele é criado em GO, e é open source.

ele permite o isolamento com niveis , ou seja eu consigo controlar os recursos que o docker vai utilizar e ainda até fazer com que os arquivos alterados sejam alterados apenas dentro do container.


9. Por que não uma VM?

Maquina virtual é mais parruda e mais completa, porém eles são mais pesados e consomem muitos recursos da maquin, já os containers possuiem quase as mesmas vantagens porém sem consumir todos esses recursos, porém um dos defeitos do docker é que ele precisa de um kernel linux para rodar.

10. O que são containers?

Basicamente ele está dizendo que o container é bem isolado com todos os seus arquivos e suas dependências, e que como ele é bem leve ele aconselha que você crie um container para cada item da sua stack, ou seja um container para o BD , um para o servidor etc.

e também diz que o container é o meio termo entre o chroot e uma VM, que seria um ambiente que é sim separado mais não 100% independente, o chroot aprisiona o processo a uma nova pasta raiz, e faz com que não seja possível escrever fora da nova pasta raiz, já a VM é um novo ambiente totalmente separado do sistema onde ele foi instalado, e o docker tem essa compartimentação do chroot mais sem consumir tanto recurso ou ser tão parrudo quanto uma VM.

11. O que são imagens Docker?

É um modelo de sistema de arquivo que é usado para montar um container docker, quando se tem um build da imagem docker ele tem um passo a passo de como criar um novo container isso significa que você vai sempre criar um novo container do mesmo jeito que foi planejado.

da para criar o seu docker file = (descritor) e armazenar no dockerhub ou baixar algumas já prontas

o esquema é fazer esse processo pelo build e não pelo commit, porque não é igual ao git que quando se da o commit ele gera uma versão, no docker se você fizer isso o descritor vai ficar salvo com as suas alterações porém ele não vai conter o passo a passo de como ou do que ele precisa para 

layered - são como niveis, e se eu tiver varios niveis só o ultimo pode ser alterado, e o restante das layers são readonly.


12. Imagem vs Container

Imagem é o modelo ou a receita de como criar um container, o container é a execução e montagem da imagem.

tipo uma classe a Imagem é a classe com todos seus atributos e metodos, já o container é o objeto instanciado.

13. Arquitetura

Docker Server , Docker Daemon, Docker engine = são todas as mesmas coisas

CLI =  é uma interface de linha de comando, que acessa o Daemon, que acessa o dockerhub para pegar as suas imagens e baixa.

Registry =  = Nuvem ou gerenciador de pacotes de imagnes do Docker


Seção 3: Instalação
12. Instalação - Visão Geral

Visão geral de Instalação, Aqui ele mostra que quando eu instalo o Docker no linux com o docker opera com a LXC ele é 100% compativel e roda utilizando todas os recursos do kernel.

porém quando vamos instalar isso no MAC OS, ou no Windows < 10 ele cria uma maquina virtual para virtualizar o linux em ambientes que não são linux.


13. Instalação Windows

Está mostrando o passo a passo para instalar o docker no windows , e ai está mostrando como baixar e instalar.

14. Instalação Mac

Mesma coisa, pulei poruqe não tenho MAC, e acho que não vou ter tão cedo.

15. Instalação Linux

Segue o padrão para sua distro, acho que tem para todas.


Seção 4: Uso Básico do Docker
16. Introdução ao Docker Client

Só falou que vamos testar a instalação na proxima aula.

17. Hello World: Meu Docker funciona!

Aqui ele já começa a testar a instalação docker como acessa o terminal (cmd) windows e terminal linux e digita "docker", ele deve apresentar as informações de ajuda do docker, isso já é um sinal de que o docker está instalado e rodando.

para testar se está funcionando a sua instalação usa o comando "docker container run hello-world" se você não tiver essa imagem instalada ele vai fazer o download e mostrar algumas informações dessa imagem, isso já é o sinal que está tudo certo.

OBS.no banco é bloqueado o dockerhub, ou seja não consigo fazer o download das paradas.

18. Meu querido amigo run

Aqui ele esta mostrando que o comando run faz uma serie de coisas por trás, e que ele na real eu teria que fazer mais não preciso.

syntax do docker pelo que eu vi é sempre "docker container alguma coisa" no caso o run ele faz
docker container pull   = baixa a imagem do Registry(dockerhub)
docker container create = Cria o container
docker container start  = Inicia o container
docker container exec   = Executa o container em modo interativo


19. Ferramentas diferentes

Aqui ele mostra que na real eu to verificando a versão do bash do meu container, e não o da minha maquina local, e que ao executar esse cara na primeira vez ele vai baixar a imagem do debian e trazer para a minha maquina e na proxima execução ele já vai pegar do local.


docker container run debian bash --version


docker container ps
esse comando serve para ver quais containers estão sendo executados agora.


docker container ps -a 
Mostra todas as imagens ativas ou não que eu tenho na minha maquina.


docker container run --rm debian bash --version
Aqui ele vai remover essa execução da lista do "ps"
